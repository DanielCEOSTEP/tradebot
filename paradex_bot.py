#!/usr/bin/env python3
"""
Paradex proto-bot:
 ‚Ä¢ –±–µ—Ä—ë—Ç —Å–≤–µ–∂–∏–π JWT (jwt_util.get_jwt)
 ‚Ä¢ WS-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è  ‚Üí –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ order_book + account
 ‚Ä¢ –≤—ã–≤–æ–¥ free_collateral –∏ –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ø—Ä–µ–¥-—Å–∫–∞–Ω–µ—Ä
"""

import json, time, decimal, os, websocket
from jwt_util import get_jwt

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ENV            = os.getenv("PARADEX_ENV", "prod")       # "prod" | "testnet"
WS_URL         = f"wss://ws.api.{ENV}.paradex.trade/v1"

MARKET         = "ETH-USD-PERP"
REFRESH_RATE   = "50ms"                                 # 15 —É—Ä., 50 –º—Å
COMM_RATE      = decimal.Decimal("0.0005")              # 0.05 %
PROFIT_MIN_USD = decimal.Decimal("1")

JWT_TOKEN      = get_jwt()
TOKEN_TTL      = 60 * 25                                # 25 –º–∏–Ω –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

OB_CHANNEL     = f"order_book.{MARKET}.snapshot@15@{REFRESH_RATE}"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ-- helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_msg_id = 0
def next_id() -> int:
    global _msg_id
    _msg_id += 1
    return _msg_id

def now(): return time.strftime("%H:%M:%S")

def log(*a, **k): print(now(), *a, **k)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ-- WS callbacks ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
AUTH_REQ_ID = None      # –∑–∞–ø–æ–º–Ω–∏–º id auth-—Å–æ–æ–±—â–µ–Ω–∏—è

def on_open(ws):
    global AUTH_REQ_ID
    log("‚ñ∂ WS connected ‚Üí sending auth ‚Ä¶")
    AUTH_REQ_ID = next_id()
    ws.send(json.dumps({
        "jsonrpc": "2.0",
        "method": "auth",
        "params": {"bearer": JWT_TOKEN},
        "id": AUTH_REQ_ID,
    }))

def subscribe_private_and_public(ws):
    for ch in (OB_CHANNEL, "account"):
        ws.send(json.dumps({
            "jsonrpc": "2.0",
            "method": "subscribe",
            "params": {"channel": ch},
            "id": next_id(),
        }))
    log(f"‚úÖ Subscribed: {OB_CHANNEL}  &  account")

def on_message(ws, message):
    msg = json.loads(message)

    # DEBUG: –ø–æ–∫–∞–∂–µ–º –≤—Å—ë, —á—Ç–æ –ø—Ä–∏—à–ª–æ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    # print("RAW:", msg)

    # 1) –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ auth
    if msg.get("id") == AUTH_REQ_ID:
        if "result" in msg:           # —É—Å–ø–µ—Ö: server –æ—Ç–≤–µ—á–∞–µ—Ç {"result":{}}
            log("‚úÖ Auth success")
            subscribe_private_and_public(ws)
        else:                         # –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            log("‚ùå Auth failure:", msg)
            ws.close()
        return

    # 2) –û—à–∏–±–∫–∏ –±–µ–∑ id (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–ø–∏—Å–∫–∞ –±–µ–∑ auth)
    if "error" in msg:
        log("‚ùå Server error:", msg["error"])
        return

    # 3) –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if msg.get("method") != "subscription":
        return

    chan   = msg["params"]["channel"]
    data   = msg["params"]["data"]

    # 3-a) account ‚Üí –±–∞–ª–∞–Ω—Å
    if chan == "account":
        fc = decimal.Decimal(data["free_collateral"])
        log(f"üí∞  Free collateral: {fc} {data['settlement_asset']}")
        return

    # 3-b) order-book
    if chan != OB_CHANNEL:
        return

    bids = [(decimal.Decimal(o["size"]), decimal.Decimal(o["price"]))
            for o in data.get("inserts", []) if o["side"] == "BUY"]
    asks = [(decimal.Decimal(o["size"]), decimal.Decimal(o["price"]))
            for o in data.get("inserts", []) if o["side"] == "SELL"]

    for q_b, p_b in bids:
        for q_a, p_a in asks:
            if q_b != q_a or p_a <= p_b:
                continue
            gross = (p_a - p_b) * q_b
            fees  = (p_b * q_b + p_a * q_a) * COMM_RATE
            net   = gross - fees
            if net > PROFIT_MIN_USD:
                log(f"üöÄ  BUY {q_b}@{p_b} ‚Üí SELL@{p_a}  "
                    f"Œî={p_a - p_b:.2f}  Net={net:.2f}")

def on_error(ws, err):   log("‚úñ WS error:", err)
def on_close(ws, c, r):  log(f"‚úñ WS closed: {c} / {r}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ-- main loop ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    next_token_at = time.time() + TOKEN_TTL

    while True:
        ws = websocket.WebSocketApp(
            WS_URL,
            on_open   = on_open,
            on_message= on_message,
            on_error  = on_error,
            on_close  = on_close,
        )
        # –¥–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ; run_forever –≤–µ—Ä–Ω—ë—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        ws.run_forever(ping_interval=20, ping_timeout=10)

        # ‚ô¶ –µ—Å–ª–∏ –∑–¥–µ—Å—å ‚Äî –∑–Ω–∞—á–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–ø–∞–ª–æ; –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å JWT
        if time.time() >= next_token_at:
            log("üîÑ  Refreshing JWT ‚Ä¶")
            JWT_TOKEN = get_jwt()
            next_token_at = time.time() + TOKEN_TTL

        time.sleep(2)    # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç–æ–º
